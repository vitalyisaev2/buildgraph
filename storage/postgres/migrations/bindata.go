// Code generated by go-bindata.
// sources:
// 0001_init_schema.down.sql
// 0001_init_schema.up.sql
// 0002_tables.down.sql
// 0002_tables.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\x28\xcf\x2f\xca\x4e\xcb\xc9\x2f\xb7\xe6\x42\x16\x2d\x4b\x2e\x46\x15\x48\xce\xb4\xe6\x02\x04\x00\x00\xff\xff\x06\xc3\x14\xe8\x37\x00\x00\x00")

func _0001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_init_schemaDownSql,
		"0001_init_schema.down.sql",
	)
}

func _0001_init_schemaDownSql() (*asset, error) {
	bytes, err := _0001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init_schema.down.sql", size: 55, mode: os.FileMode(420), modTime: time.Unix(1505163414, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x76\xf6\x70\xf5\x75\x54\x28\xcf\x2f\xca\x4e\xcb\xc9\x2f\xb7\xe6\x42\x15\x2f\x4b\x2e\x46\x17\x4a\xce\xb4\xe6\x02\x04\x00\x00\xff\xff\xe6\xae\x68\x1d\x3d\x00\x00\x00")

func _0001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_init_schemaUpSql,
		"0001_init_schema.up.sql",
	)
}

func _0001_init_schemaUpSql() (*asset, error) {
	bytes, err := _0001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init_schema.up.sql", size: 61, mode: os.FileMode(420), modTime: time.Unix(1505163418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4b\x2e\xd6\x4b\x2c\x2d\xc9\xc8\x2f\x2a\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x42\x93\x2f\x28\xca\xcf\x4a\x4d\x2e\x41\x52\x00\x08\x00\x00\xff\xff\x5d\x04\xc4\x38\x41\x00\x00\x00")

func _0002_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_tablesDownSql,
		"0002_tables.down.sql",
	)
}

func _0002_tablesDownSql() (*asset, error) {
	bytes, err := _0002_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_tables.down.sql", size: 65, mode: os.FileMode(420), modTime: time.Unix(1505164508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xc1\x0a\x82\x40\x10\x06\xe0\xfb\x3e\xc5\x8f\x27\x05\xe9\x05\x3a\x4d\x32\x90\x64\x56\x93\x06\x1e\x17\x5d\xc8\xc8\x14\xb5\x9e\x3f\xda\x2d\x08\xa2\x3d\xce\xfc\xff\x0c\x5f\x22\x4c\x05\xa3\xa0\x55\xc6\x78\xd4\xd3\x42\xdf\xe7\x73\x3f\x4e\x08\x15\x00\xb4\x0d\x8e\x2c\x29\x65\xb1\x1d\x6f\xba\x33\x38\x91\x24\x6b\x12\xe4\xbb\x02\x79\x99\xbd\x23\xd3\xe9\xf6\xfa\xc9\xdc\xaa\xcc\xd3\x43\xc9\x08\x5f\x57\xb1\x2b\x44\x2e\xd9\x4b\xba\x25\xa9\xb0\xe1\x0a\x61\xd0\x36\x41\xa4\xa2\xa5\x52\xea\x47\x33\x8c\xfd\xc5\xd4\xb3\x87\x33\x0d\xba\x36\xf8\x83\xf2\x78\xbf\x71\xf6\x47\x6c\xdb\x5e\xe0\x33\x00\x00\xff\xff\x8e\x29\xe9\xb8\x2d\x01\x00\x00")

func _0002_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_tablesUpSql,
		"0002_tables.up.sql",
	)
}

func _0002_tablesUpSql() (*asset, error) {
	bytes, err := _0002_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_tables.up.sql", size: 301, mode: os.FileMode(420), modTime: time.Unix(1509573235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xb8\x13\x3d\x8b\x9f\x82\x35\xd0\x42\xfa\xc1\x3f\x5b\xff\x25\x1b\xc8\xa5\x4d\x17\xe8\x61\x5b\x60\xdb\x9e\x76\x16\x01\x25\x91\x2e\xb1\xb6\xe4\x4a\x72\x3b\x49\x90\xef\xbe\x18\x91\x72\x1d\x27\x4e\x8a\x34\x3d\xd8\x12\x47\x9c\x99\x37\xe4\x7b\x43\xce\xe7\xfc\x4d\x53\x49\xbe\x92\xb5\x6c\x45\x2f\x2b\x5e\x5c\xf2\x55\xf3\xff\x42\xd7\x95\xe8\xc5\x8c\xcd\xe7\xbc\x6b\x76\x6d\x29\xbb\x25\xbd\xfb\xbe\x1f\x5c\xe8\x5a\xf7\x17\x5d\xf9\x45\x6e\xc4\xac\x6a\xbe\xd7\xb3\xee\xeb\xfa\xde\x8f\xbb\xed\xc1\xa7\xf0\xa2\x17\xc5\x5a\x76\xc7\x2e\x7b\xfb\x8f\xd9\x63\xf6\x55\x43\xa3\xf3\x0f\xfc\xfd\x87\x4f\xfc\xed\xf9\xbb\x4f\x2f\x18\xdb\x8a\xf2\x5f\xb1\x92\x7c\xa3\x57\xad\xe8\x75\x53\x77\x8c\xe9\xcd\xb6\x69\x7b\xee\x32\x67\x52\x5c\xf6\xb2\x9b\x30\x67\x52\x36\x9b\x6d\x2b\xbb\x6e\xbe\xba\xd2\x5b\x32\xa8\x4d\x4f\x0f\xdd\x98\xff\xb9\x6e\x76\xbd\x5e\xd3\xa0\x19\x1c\xb6\xa2\xff\x32\x57\x7a\x2d\xe9\x85\x0c\x5d\xdf\xea\x7a\x35\x7c\xeb\xf5\x46\x4e\x98\xc7\x98\xda\xd5\xe5\x08\xef\x2f\x29\x2a\x97\x5e\xf8\xdf\xff\x50\xda\x29\xaf\xc5\x46\x72\xe3\xe6\x71\x77\xb4\xca\xb6\x6d\x5a\x8f\x5f\x33\x67\x75\x35\x8c\xf8\xf2\x8c\x13\xaa\xd9\x7b\xf9\x9d\x82\xc8\xd6\x1d\x60\xd3\xf8\xf5\x4e\x29\xd9\x0e\x61\x3d\x8f\x39\x5a\x0d\x0e\x2f\xce\x78\xad\xd7\x14\xc2\x69\x65\xbf\x6b\x6b\x1a\x4e\xb9\xda\xf4\xb3\xb7\x14\x5d\xb9\x13\x0a\xc4\x5f\x7e\x5d\xf2\x97\xdf\x26\x06\xc9\x90\xcb\x63\xce\x0d\x63\xce\x37\xd1\xf2\x62\xa7\xb8\xc9\x63\x92\x30\xe7\xc2\xc0\x39\xe3\xba\x99\xbd\x69\xb6\x97\xee\xab\x62\xa7\xa6\x7c\x75\xe5\x31\xa7\x5c\xbf\x1d\x91\xce\xde\xac\x9b\x4e\xba\x1e\x7b\x2e\x3c\x14\xc6\xc4\x3f\x11\x48\xb6\xad\xc1\x6d\x8d\xc5\x4e\xcd\x5e\x13\x74\xd7\x9b\xd2\x0c\x76\xc3\x58\x7f\xb9\x95\x5c\x74\x9d\xec\x69\xc9\x77\x65\x4f\x51\x86\xfa\xec\x7e\x30\x47\xd7\xaa\xe1\xbc\xe9\x66\x7f\xe8\xb5\x7c\x57\xab\x66\xef\x67\xb7\x70\xb4\x1f\x44\x18\xf6\x90\x73\xbb\x8d\xcc\xe9\xf4\xd5\x30\xd6\x75\x9f\xc6\xcc\xd9\x90\x5a\xf8\x3e\xe8\x9f\x4d\x25\x07\xe3\x27\xbd\x91\x9c\x68\x32\xa3\x37\xca\x33\x50\xc5\x55\xfa\x38\x97\xc7\xdf\x8b\x8d\x74\x3d\x9b\x81\x72\xda\x2a\x95\x9e\x51\x76\x76\xf3\x80\xef\x47\x7d\x45\xbe\x03\x9a\xdb\xae\x04\xf4\x41\x57\xc2\xea\x7a\x87\xc8\x6f\x07\xa0\xd2\x1e\x0b\x40\xc5\xb9\xde\x8f\x42\xef\x44\xb0\xd5\x9f\x0e\xf2\xae\x3b\xd7\xad\xeb\xf1\xa2\x69\xd6\x87\xde\x62\xdd\x3d\x52\xf9\x65\x67\x0a\x97\xad\x12\xa5\xbc\xbe\x39\xf0\xb6\x94\x20\x96\x5f\x5c\x1c\xb7\xa1\xf3\xe6\x7b\xfd\xf1\xeb\x9a\x9f\x59\x5e\xb8\x13\xc0\x40\x01\xe6\x05\xa0\x9f\x03\xfa\xfe\xfd\x3f\xa5\x00\xb3\x10\xd0\x5f\x00\x2a\x7a\x2a\xc0\xc4\x37\x3e\x59\x0a\xa8\x52\xc0\x8c\xe6\x25\x80\x59\x02\x98\xc4\x80\x61\x0e\x58\x2a\xc0\x50\x01\x96\x02\x30\x96\x80\x65\x01\x58\x2e\x8c\xad\xc8\x00\x65\x0a\x18\x87\x80\x41\x0a\x18\x56\x80\x71\x01\x18\x4a\xc0\x38\x05\x0c\x12\xc0\x98\x62\x48\xc0\x22\x36\x73\x7d\xca\x1d\xdf\xc6\x45\x3f\x3f\x05\x2c\x23\xc0\x80\xe6\xe5\x80\x51\x76\x88\x7f\x32\x76\xab\x53\xeb\x61\xf5\x74\x5f\x9f\x1a\x55\x77\xd0\xe7\x98\xe3\x9c\x5c\xd9\x29\x73\x9c\xc9\xc9\x93\x61\x32\x65\x8e\xb7\x17\xc4\xa9\x18\x04\xe4\x7f\x83\x9a\x0f\x81\x0c\x72\xde\xf7\xcc\x47\x2a\x79\xac\x3b\xed\x9b\xca\xd0\x16\x96\x67\xc7\x14\xbb\x26\xf1\x2d\xf9\x43\x95\x70\x12\xd9\x92\x27\xc9\x94\x93\x5a\x96\x87\x62\x72\xe3\xd0\xf7\x06\x3b\x69\x60\x69\x34\xf2\xb9\xd6\xe8\x06\x89\x9f\x04\x69\x14\x07\xf1\x94\xfb\xde\x0d\x73\x04\x65\x7f\x35\x54\x7b\x3d\x94\xb8\xe4\xb6\x52\x82\xb6\x1c\xfe\x6f\xf6\xdb\x20\xa6\x0f\xf3\xfb\xf3\xf6\x97\xd8\x2d\xcd\x93\x18\xec\x97\x80\x59\x00\x98\x24\xcf\xc8\xf2\xc4\xd8\x6e\xb1\x3c\x03\x8c\xc5\xcf\xb1\x9c\xbe\x09\x09\x98\xe6\x80\x41\x05\x18\x55\x3f\xc7\xf2\x61\x55\x9e\x81\xe3\x43\x9c\xfb\x19\x6e\x2e\x2c\x8f\xf0\x7b\xf0\x7f\x12\xbb\x0f\x2b\xf8\x6d\xdc\x1e\x6b\xb0\xcc\x4e\x83\xa7\x31\x3b\x7f\x2e\x66\x8f\xb7\xc1\xdf\xd2\xb4\x03\xc0\x2c\x36\xf6\x91\xe6\x44\xe5\x91\x9a\x55\x6a\xdf\x4b\xd3\x98\x89\xce\x65\x6e\xe8\x1b\x0a\xc0\xc4\x4a\x81\x64\x31\x48\x25\xb5\xbf\xd8\xc4\x2b\x92\x1f\xb4\x5f\x44\xd6\x2f\x37\x12\x21\xb9\x10\xe5\xe3\xca\xca\x80\xf2\x87\x16\x77\x7e\x97\xf6\x49\x65\xe4\x50\xc6\x80\x51\x6e\xe6\x9f\xa0\xfd\xd1\x92\x3d\x8d\xf3\x47\x41\x46\xc2\xdf\xb9\xb4\xdf\x65\xfb\x91\xe7\xcf\x52\xfd\x7e\xd4\xcf\xc8\xf3\x7b\xa0\x8f\x24\x7f\x4a\xfb\x8e\x13\xff\xd9\x49\xfe\x0b\x9d\xbb\x34\xdd\xb3\x24\x5a\x08\xc0\x3c\x04\x8c\x7d\xc0\xc0\x37\xf7\x02\x49\xf3\x0a\xc0\x88\xe6\x24\x80\x39\x51\x91\xee\x07\x44\xd1\x85\x79\x46\x96\x8e\x11\xd1\xd5\x07\x4c\x63\x43\x71\xa2\x2e\xc5\x08\xa4\xe9\xd4\x44\x45\x92\x01\xfd\xe8\xae\x41\x34\x5f\x48\xc0\x48\x01\x56\xc2\x48\x85\xf0\x8a\xd0\x74\x67\xc2\xa5\x4a\x7b\x47\x29\x01\x13\xca\x4d\xf8\x4a\x93\x57\x44\x80\xc2\x37\xf2\x2b\x49\x3e\x39\x60\x15\x03\x56\x91\x91\x4e\x45\x5d\x3f\x03\xcc\x22\x93\x83\x4e\x17\x8a\x4f\x27\x09\xd5\x4f\x27\x86\x5f\x01\xe6\xd2\x4a\x75\x01\x98\x26\x80\x45\x60\x4e\x88\x94\x4e\x20\x01\x18\x45\x46\x3a\x8b\x00\x30\x8c\x01\xd3\x02\x30\x08\x01\x25\xd5\x50\x98\x13\x27\x5b\x00\x2e\x16\x80\x05\xc9\x32\x32\x18\x68\x7d\xe8\xd4\x53\xc2\xb4\x80\xaa\x04\x14\xf4\x5e\x5a\x8c\x91\xb1\x13\x26\xaa\x2d\xc9\x4c\xee\xb0\x00\x8c\x63\xdb\x4a\x16\xa6\x95\x10\x8e\x90\x6a\xa6\x1c\x3e\xa0\xb4\xfb\x95\x06\x80\x95\x0f\x18\xa5\x46\xda\x22\x36\xeb\x27\x12\xd3\x16\x24\xed\x4d\x66\x6a\xc8\x69\x2d\x2b\xb3\x8f\xb4\x4e\x05\xd9\xec\x37\x5a\x87\xa1\x56\xc2\x9b\x03\xe6\x91\x6d\x6f\x39\x60\xa1\x4c\x5b\xa2\x5a\x28\x56\x4a\xf8\x0b\xc0\x44\x1a\x7e\x90\xff\x7f\x01\x00\x00\xff\xff\xa7\x53\x15\xc7\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1509573256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_init_schema.down.sql": _0001_init_schemaDownSql,
	"0001_init_schema.up.sql": _0001_init_schemaUpSql,
	"0002_tables.down.sql": _0002_tablesDownSql,
	"0002_tables.up.sql": _0002_tablesUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_init_schema.down.sql": &bintree{_0001_init_schemaDownSql, map[string]*bintree{}},
	"0001_init_schema.up.sql": &bintree{_0001_init_schemaUpSql, map[string]*bintree{}},
	"0002_tables.down.sql": &bintree{_0002_tablesDownSql, map[string]*bintree{}},
	"0002_tables.up.sql": &bintree{_0002_tablesUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

