// Code generated by go-bindata.
// sources:
// 0001_init_schema.down.sql
// 0001_init_schema.up.sql
// 0002_tables.down.sql
// 0002_tables.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\x28\xcf\x2f\xca\x4e\xcb\xc9\x2f\xb7\xe6\x42\x16\x2d\x4b\x2e\x46\x15\x48\xce\xb4\xe6\x02\x04\x00\x00\xff\xff\x06\xc3\x14\xe8\x37\x00\x00\x00")

func _0001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_init_schemaDownSql,
		"0001_init_schema.down.sql",
	)
}

func _0001_init_schemaDownSql() (*asset, error) {
	bytes, err := _0001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init_schema.down.sql", size: 55, mode: os.FileMode(420), modTime: time.Unix(1510602114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x76\xf6\x70\xf5\x75\x54\x28\xcf\x2f\xca\x4e\xcb\xc9\x2f\xb7\xe6\x42\x15\x2f\x4b\x2e\x46\x17\x4a\xce\xb4\xe6\x02\x04\x00\x00\xff\xff\xe6\xae\x68\x1d\x3d\x00\x00\x00")

func _0001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_init_schemaUpSql,
		"0001_init_schema.up.sql",
	)
}

func _0001_init_schemaUpSql() (*asset, error) {
	bytes, err := _0001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_init_schema.up.sql", size: 61, mode: os.FileMode(420), modTime: time.Unix(1510602114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4b\x2e\xd6\x4b\x2d\x4b\xcd\x2b\x29\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x42\x93\x2e\x28\xca\xcf\x4a\x4d\xc6\xa3\x20\x39\x3f\x37\x37\x13\x8f\x7c\x62\x69\x49\x46\x7e\x11\x92\x3c\x20\x00\x00\xff\xff\xf4\x34\xed\x0e\x80\x00\x00\x00")

func _0002_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_tablesDownSql,
		"0002_tables.down.sql",
	)
}

func _0002_tablesDownSql() (*asset, error) {
	bytes, err := _0002_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_tables.down.sql", size: 128, mode: os.FileMode(420), modTime: time.Unix(1514133317, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __0002_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xdd\x4e\x83\x30\x14\xbe\xef\x53\x9c\x4b\xb6\x10\xf7\x00\x5e\xe1\x72\x34\x44\xc0\x59\x4a\xe2\x62\xcc\xd2\xd0\x2a\x35\x76\x10\xca\x78\x7e\xb3\x96\x88\x42\xb7\xe0\xed\xf9\x7a\xfa\xfd\x9d\x2d\xc5\x88\x21\xb0\xe8\x2e\x41\xe8\x4b\x73\xd3\xb4\xf5\xa7\x2c\x3b\x03\x01\x01\x00\x50\x02\x72\xa4\x71\x94\xc0\x8e\xc6\x69\x44\xf7\xf0\x88\xfb\xd0\x42\x47\xae\xa5\x69\x78\x29\x81\xe1\x0b\x83\xec\x89\x41\x56\x24\xc9\x08\xfa\xe6\x55\xd7\x35\x87\x53\xfb\xe5\xc3\x8a\x2c\x7e\x2e\x10\x82\x9f\x8f\x43\xfb\xcd\x8a\xac\x6e\x09\x99\x09\x95\xbd\x3c\x2e\x91\x39\x18\x3a\x28\x01\x71\xc6\xf0\x01\x29\x50\xbc\x47\x8a\xd9\x16\xf3\x3f\x96\x03\x25\x1c\xd7\x9c\x8c\x9f\xba\xaa\x6e\x17\x86\xe2\xf3\x26\x35\x57\xce\xf4\xdc\x6b\xe8\xd0\x0b\x3e\xcb\x5a\x6b\xb5\xc4\x68\xc5\x4d\xe5\xa3\xd6\xd2\x18\xfe\xe1\x55\xd5\xa9\xb3\xda\x38\xc5\x9c\x45\xe9\x6e\x02\x5e\x68\x89\x0b\x21\x85\x05\x5e\xdf\x06\x82\x5a\xa8\x77\x35\x19\xb6\x52\xd7\xfd\x64\xf6\xbf\x2a\x06\x3a\x9b\xfc\x95\x95\xa1\x9a\x71\xc3\x1e\xc6\x95\x05\x77\x38\xe3\x7b\x57\x45\x70\x8e\x2f\xfc\x25\xd1\xd6\xb1\x59\x93\xf5\x86\x7c\x07\x00\x00\xff\xff\xdb\xf3\xda\x97\x25\x03\x00\x00")

func _0002_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_tablesUpSql,
		"0002_tables.up.sql",
	)
}

func _0002_tablesUpSql() (*asset, error) {
	bytes, err := _0002_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_tables.up.sql", size: 805, mode: os.FileMode(420), modTime: time.Unix(1514205441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4b\x6f\xdb\xb8\x16\x5e\x8b\xbf\x82\x35\xd0\x42\xba\xf0\x75\xf4\x7e\x18\xc8\xa6\x4d\x2f\xd0\xc5\x6d\x81\x69\xbb\x9a\x33\x08\x28\x89\x74\x85\xb1\x25\x57\x92\xdb\x93\x04\xf9\xef\x83\xc3\x23\xa7\x8e\x9b\x47\xa7\x93\x62\x16\xb2\x45\x8a\xe7\xc9\xef\xfb\xc8\x93\x13\xf9\xaa\xab\xb5\x5c\xe9\x56\xf7\x6a\xd4\xb5\x2c\x2f\xe4\xaa\xfb\x6f\xd9\xb4\xb5\x1a\xd5\x42\x9c\x9c\xc8\xa1\xdb\xf5\x95\x1e\x96\xf4\xee\xfb\x7e\x70\xde\xb4\xcd\x78\x3e\x54\x9f\xf4\x46\x2d\xea\xee\x6b\xbb\x18\x3e\xaf\xef\xfc\xb8\xdb\x1e\x7c\x0a\xcf\x47\x55\xae\xf5\x70\x6c\x72\x33\xff\x6d\xf5\x3e\xfa\xaa\xa3\xd1\xd9\x3b\xf9\xf6\xdd\x07\xf9\xfa\xec\xcd\x87\x67\x42\x6c\x55\xf5\xa7\x5a\x69\xb9\x69\x56\xbd\x1a\x9b\xae\x1d\x84\x68\x36\xdb\xae\x1f\xa5\x2b\x9c\x59\x79\x31\xea\x61\x26\x9c\x59\xd5\x6d\xb6\xbd\x1e\x86\x93\xd5\x65\xb3\xa5\x09\xb3\x19\xe9\xaf\xe9\xf8\xf7\xa4\xe9\x76\x63\xb3\xa6\x41\x67\x0d\xb6\x6a\xfc\x74\x62\x9a\xb5\xa6\x17\x9a\x18\xc6\xbe\x69\x57\xf6\xdb\xd8\x6c\xf4\x4c\x78\x42\x98\x5d\x5b\xed\xd3\xfb\x4d\xab\xda\xa5\x17\xf9\xfb\x1f\x14\x76\x2e\x5b\xb5\xd1\x92\xcd\x3c\xe9\xee\x67\x75\xdf\x77\xbd\x27\xaf\x84\xb3\xba\xb4\x23\xb9\x3c\x95\x94\xd5\xe2\xad\xfe\x4a\x4e\x74\xef\xda\xb4\x69\xfc\x72\x67\x8c\xee\xad\x5b\xcf\x13\x4e\x63\xac\xc1\xb3\x53\xd9\x36\x6b\x72\xe1\xf4\x7a\xdc\xf5\x2d\x0d\xe7\xd2\x6c\xc6\xc5\x6b\xf2\x6e\xdc\x19\x39\x92\xcf\x3f\x2f\xe5\xf3\x2f\x33\xce\xc4\xc6\xf2\x84\x73\x2d\x84\xf3\x45\xf5\xb2\xdc\x19\xc9\x71\x38\x88\x70\xce\x39\x9d\x53\xd9\x74\x8b\x57\xdd\xf6\xc2\x7d\x51\xee\xcc\x5c\xae\x2e\x3d\xe1\x54\xeb\xd7\xfb\x4c\x17\xaf\xd6\xdd\xa0\x5d\x4f\x3c\x55\x3e\xe4\x86\xfd\xdf\xe3\x48\xf7\x3d\xe7\x3d\x4d\x96\x3b\xb3\x78\x49\xa9\xbb\xde\x9c\x56\x88\x6b\x21\xc6\x8b\xad\x96\x6a\x18\xf4\x48\x2d\xdf\x55\x23\x79\xb1\xf5\x4d\xfb\x21\x9c\xa6\x35\x9d\x94\xdd\xb0\xf8\x5f\xb3\xd6\x6f\x5a\xd3\xdd\xd8\x4d\x5b\xb8\x9f\x3f\xf0\x60\xf7\x50\xca\x69\x1b\x85\x33\x34\x97\x76\xdc\xb4\x63\x1a\x0b\x67\x43\x6c\x91\x37\x4e\xff\xdf\xd5\xda\x4e\x7e\x68\x36\x5a\x12\x4c\x16\xf4\x46\x71\x2c\x54\x5c\xd3\x1c\xc7\xf2\xe4\x5b\xb5\xd1\xae\x37\x45\xa0\x98\x53\x95\xa6\x59\x50\x74\x71\xfd\x80\xed\xfb\xe6\x92\x6c\x6d\x36\xb7\x4d\x29\xd1\x07\x4d\x29\x57\xd7\x3b\xcc\xfc\xb6\x03\x2a\xed\x31\x07\x54\x9c\xeb\x7d\x2b\xf4\x3b\x0f\x53\xf5\xf7\x3b\x79\x33\x9c\x35\xbd\xeb\xc9\xb2\xeb\xd6\x87\xd6\x6a\x3d\x3c\x52\xf9\xc5\xc0\x85\xeb\xde\xa8\x4a\x5f\x5d\x1f\x58\x4f\x90\x20\x94\x9f\x9f\x1f\xcb\xd0\x59\xf7\xb5\x7d\xff\x79\x2d\x4f\x27\x5c\xb8\x33\xc0\xc0\x00\xe6\x25\xa0\x9f\x03\xfa\xfe\xdd\x8f\x31\x80\x59\x08\xe8\x17\x80\x86\xfe\x0d\x60\xe2\xb3\x4d\x96\x02\x9a\x14\x30\xa3\x75\x09\x60\x96\x00\x26\x31\x60\x98\x03\x56\x06\x30\x34\x80\x95\x02\x8c\x35\x60\x55\x02\x56\x05\xcf\x95\x19\xa0\x4e\x01\xe3\x10\x30\x48\x01\xc3\x1a\x30\x2e\x01\x43\x0d\x18\xa7\x80\x41\x02\x18\x93\x0f\x0d\x58\xc6\xbc\xd6\xa7\xd8\xf1\xed\xbc\xe8\xf1\x53\xc0\x2a\x02\x0c\x68\x5d\x0e\x18\x65\x87\xf9\xcf\xf6\x6a\x75\x5f\x3f\x26\x3e\xdd\xa5\x53\x7b\xd6\x1d\xe8\x9c\x70\x9c\x7b\x3b\x3b\x17\x8e\x33\xbb\xf7\x64\x98\xcd\x85\xe3\xdd\x10\xe2\x3e\x1f\x94\xc8\x7f\x2c\x9b\x0f\x13\xb1\x74\xbe\xd1\xcc\x47\x2a\x79\x4c\x9d\x6e\x44\xc5\xca\xc2\xf2\xf4\x18\x62\x57\x44\xbe\xa5\x7c\xa8\x12\x49\x24\x5b\xca\x24\x99\x4b\x62\xcb\xf2\x90\x4c\x6e\x1c\xfa\x9e\x9d\x27\x0e\x2c\x99\x23\x1f\xdb\x06\xdd\x20\x09\xfc\xd4\x0f\x83\x20\x9e\x4b\xdf\xbb\x16\x8e\xa2\xe8\x2f\x6c\xb5\x57\xb6\xc4\xa5\x9c\x2a\xa5\xd4\x96\xf6\xf7\xfa\x66\x1b\xd4\xfc\x61\x7c\x7f\xdc\xfe\x23\x74\x6b\xfe\x27\x04\xfb\x15\x60\x16\x00\x26\xc9\x13\xa2\x3c\xe1\xb9\x5b\x28\xcf\x00\x63\xf5\x63\x28\xa7\x6f\x4a\x03\xa6\x39\x60\x50\x03\x46\xf5\x8f\xa1\xdc\x76\xe5\x09\x30\x6e\xfd\xdc\x8d\x70\xbe\xb0\x3c\x82\x6f\x6b\xff\x53\xe8\x3e\xac\xe0\x97\x61\x7b\x5f\xc3\x84\xec\x34\xf8\x97\x91\xbd\xbf\x0d\xfe\x12\xd1\x0e\x00\xb3\x98\xe7\xf7\x30\x27\x28\xef\xa1\x59\xa7\xd3\xfb\x24\xca\x55\x0d\x18\xd2\xb8\x00\x4c\x26\x1a\x10\x25\x2c\x4d\xd2\xe9\x89\xd9\x57\x99\x7c\x83\x7c\x11\xb1\x3f\x4b\x13\xc5\x54\x21\xb8\xc7\x35\x60\x45\x70\xa6\xef\x3e\x60\x54\x00\x46\x86\x85\x9b\x9e\x20\x02\xcc\x29\xff\x0a\x30\x0d\x01\xd3\x02\x30\x2e\x98\x32\x99\x06\x0c\x02\xc0\x22\x04\x8c\x2a\xb6\x3f\xa6\x8a\x89\x01\x23\xa2\x53\xcd\xb4\xce\xfd\x7b\xa9\x72\xd4\xe6\x9f\xe3\xc9\x91\x93\x3d\x49\xbe\xbb\xe8\x7f\xcf\x90\x23\xcb\x1f\xa5\xc7\xdd\x59\x3f\x21\x37\xee\x48\x7d\x22\x46\x10\xe6\x7f\x97\x19\x71\x10\x45\x51\x90\x3d\x35\x33\x7e\x5e\xee\x8b\x18\x30\x09\x01\xeb\x9a\x25\x3b\x8f\x00\x23\x9f\x2f\x10\xa5\x06\xd4\xc4\x95\x08\xb0\xa8\x18\xff\x25\x49\x35\xd9\x4e\x17\x8b\x84\xd6\x04\xcc\x2f\xc2\x59\x1c\x03\x56\x34\x5f\x30\xbe\x75\xc8\xb8\xad\x2a\xc0\x9a\xe2\xf8\x80\xa1\x02\x8c\x12\xe6\x0a\xf9\x22\x3e\x64\x39\xe3\xb9\xa4\x58\x29\x60\x9e\x33\x6f\xec\xb1\xe1\x33\x7e\x4d\x01\x98\x29\x40\x43\x4f\x0d\x58\xd4\xcc\xcb\x2a\xe1\xf5\x21\x71\xce\xe7\x8b\x8f\x3d\x56\x02\x7e\xa7\xbc\xb3\x08\xb0\x8e\xf8\x68\xa1\x63\x4b\x65\x80\x61\x05\x18\x51\x8f\x22\x40\x3f\x98\x1e\x7f\xd2\x86\x90\x6b\x52\x13\x97\x8b\xa9\xae\x5c\x33\x5f\x2d\x0f\x63\xee\x83\xf1\x39\xbe\x29\xb9\x3e\xca\x3b\xce\xf8\x88\x52\x09\xaf\xa5\xfa\x48\x33\xf2\x80\xfb\xe5\x97\xdc\x6b\x5d\x01\xe6\x05\xe7\x4a\x7a\x12\xc6\x7c\x64\xd2\xbe\x51\x9d\xa4\x1f\xa4\x49\x75\xc6\x3d\xcb\x33\xde\x0f\x8a\xa5\x13\xbe\xec\xe5\x8a\x6b\xa1\xfe\x51\xdd\xd4\xd3\x9c\x34\xc7\xb0\x76\xc4\xd3\x7a\xd2\x2e\x5a\xab\x48\x4b\x34\xeb\x61\x51\x4c\xff\x09\x60\x59\x5b\x1d\xf9\x2b\x00\x00\xff\xff\xfc\x18\x48\x65\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1514205698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_init_schema.down.sql": _0001_init_schemaDownSql,
	"0001_init_schema.up.sql": _0001_init_schemaUpSql,
	"0002_tables.down.sql": _0002_tablesDownSql,
	"0002_tables.up.sql": _0002_tablesUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_init_schema.down.sql": &bintree{_0001_init_schemaDownSql, map[string]*bintree{}},
	"0001_init_schema.up.sql": &bintree{_0001_init_schemaUpSql, map[string]*bintree{}},
	"0002_tables.down.sql": &bintree{_0002_tablesDownSql, map[string]*bintree{}},
	"0002_tables.up.sql": &bintree{_0002_tablesUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

